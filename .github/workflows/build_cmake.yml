---
# Original source URL of `build_cmake.yml`:
# https://github.com/cristianadam/HelloWorld/blob/c4d9676dc11927936d7840cf60d33af6f53ba62e/.github/workflows/build_cmake.yml

name: CMake Build Matrix

on: [ push, pull_request ] # yamllint disable-line rule:truthy

env:
  CMAKE_VERSION: 3.23.0
  NINJA_VERSION: 1.10.2
  CCACHE_VERSION: 4.6
  PYTHON_VERSION: 3.9  # we can use any starting from 3.7 which is first supported by PyInstaller
  BUILD_TYPE: Release

jobs:
  check-formatting:
    name: Check Code Formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Check Markdown syntax (docker)
        shell: sh
        run: make -- check-md

      - name: Check YAML syntax (docker)
        shell: sh
        run: make -- check-yaml

      - name: Check Python syntax (PEP8) (docker)
        shell: sh
        run: make -- check-pep8

  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      ARTIFACT_NAME: webserver-${{ matrix.config.artifact }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows 2019 - Visual Studio 2019 - MSVC 2019", artifact: "windows-msvc.7z",
            os: windows-2019,
            generator: "Visual Studio 16 2019",
            multiconfig: true
          }
          # MinGW is disabled since Hunter is trying to pass MSVC compiler options to gcc compiler when building Boost:
          # g++.exe: error: /MT: No such file or directory
          # - {
          #     name: "Windows 2022 - MinGW Makefiles - MinGW 8.1", artifact: "windows-mingw.7z",
          #     os: windows-2022,
          #     generator: "MinGW Makefiles",
          #     multiconfig: false
          #  }
          - {
            name: "Ubuntu 20.04 - Unix Makefiles - GCC 9.4", artifact: "linux-makefiles-gcc.7z",
            os: ubuntu-20.04,
            generator: "Unix Makefiles",
            multiconfig: false
          }
          - {
            name: "Ubuntu 20.04 - Ninja - GCC 9.4", artifact: "linux-ninja-gcc.7z",
            os: ubuntu-20.04,
            generator: "Ninja",
            multiconfig: false
          }
          - {
            name: "macOS 11 - Xcode - Clang 13.0", artifact: "macos-xcode-clang.7z",
            os: macos-11,
            generator: "Xcode",
            multiconfig: true
          }
          - {
            name: "macOS 11 - Ninja - Clang 13.0", artifact: "macos-ninja-clang.7z",
            os: macos-11,
            generator: "Ninja",
            multiconfig: false
          }

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: requirements.dev.txt

      - name: Install dependencies (pip)
        shell: sh
        run: |
          python -m pip install --upgrade -- pip
          pip install --requirement=requirements.dev.txt

      - name: Download Ninja and CMake
        shell: cmake -P {0}
        run: |
          set(cmake_version $ENV{CMAKE_VERSION})
          set(ninja_version $ENV{NINJA_VERSION})

          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ninja_suffix "win.zip")
            set(cmake_suffix "windows-x86_64.zip")
            set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(ninja_suffix "linux.zip")
            set(cmake_suffix "linux-x86_64.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(ninja_suffix "mac.zip")
            set(cmake_suffix "macos-universal.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
          endif()

          file(MAKE_DIRECTORY $ENV{RUNNER_TEMP}/bin)

          set(ninja_url
            "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}"
          )
          file(DOWNLOAD "${ninja_url}" $ENV{RUNNER_TEMP}/ninja.zip SHOW_PROGRESS)
          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND_ERROR_IS_FATAL ANY
            WORKING_DIRECTORY "$ENV{RUNNER_TEMP}/bin"
            COMMAND ${CMAKE_COMMAND} -E tar xvf "$ENV{RUNNER_TEMP}/ninja.zip"
          )

          set(cmake_repo "https://github.com/Kitware/CMake")
          set(cmake_url
            "${cmake_repo}/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}"
          )
          file(DOWNLOAD "${cmake_url}" $ENV{RUNNER_TEMP}/cmake.zip SHOW_PROGRESS)
          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND_ERROR_IS_FATAL ANY
            WORKING_DIRECTORY "$ENV{RUNNER_TEMP}"
            COMMAND ${CMAKE_COMMAND} -E tar xvf "$ENV{RUNNER_TEMP}/cmake.zip"
          )

          # Add to PATH environment variable
          file(TO_CMAKE_PATH "$ENV{RUNNER_TEMP}/${cmake_dir}" cmake_dir)
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          file(APPEND "$ENV{GITHUB_PATH}" "$ENV{RUNNER_TEMP}/bin${path_separator}${cmake_dir}")

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND_ECHO STDOUT
              COMMAND_ERROR_IS_FATAL ANY
              COMMAND chmod +x "$ENV{RUNNER_TEMP}/bin/ninja"
              COMMAND chmod +x "${cmake_dir}/cmake"
            )
          endif()

      - name: Download ccache
        id: ccache
        shell: cmake -P {0}
        run: |
          set(ccache_url
            "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz"
          )
          file(DOWNLOAD "${ccache_url}" $ENV{RUNNER_TEMP}/ccache.tar.xz SHOW_PROGRESS)
          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND_ERROR_IS_FATAL ANY
            WORKING_DIRECTORY "$ENV{RUNNER_TEMP}/bin"
            COMMAND ${CMAKE_COMMAND} -E tar xvf "$ENV{RUNNER_TEMP}/ccache.tar.xz"
          )

      - name: Set up ccache cache files
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/.ccache
          key: ${{ matrix.config.name }}-${{ env.BUILD_TYPE }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ matrix.config.name }}-${{ env.BUILD_TYPE }}-ccache-

      - name: Set up cache directory for Hunter package manager
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/.hunter-cache
          key: ${{ matrix.config.name }}-hunter-v1-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ matrix.config.name }}-hunter-v1-

      - name: Set Hunter cache directory
        shell: sh
        run: |
          echo "HUNTER_ROOT=$RUNNER_TEMP/.hunter-cache" >> "$GITHUB_ENV"

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          set(ENV{PATH} "$ENV{RUNNER_TEMP}/bin${path_separator}$ENV{PATH}")

          set(select_build_type_arg "")
          if ("${{ matrix.config.multiconfig }}" STREQUAL "false")
            set(select_build_type_arg "-D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}")
          endif()

          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND cmake
              -S .
              -B "$ENV{RUNNER_TEMP}/build"
              ${select_build_type_arg}
              -G "${{ matrix.config.generator }}"
              -D CMAKE_C_COMPILER_LAUNCHER=ccache
              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

          file(TO_CMAKE_PATH "$ENV{RUNNER_TEMP}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          set(ENV{CCACHE_COMPRESS} "true")
          set(ENV{CCACHE_COMPRESSLEVEL} "6")
          set(ENV{CCACHE_MAXSIZE} "400M")
          if ("${{ matrix.config.cxx }}" STREQUAL "cl")
            set(ENV{CCACHE_MAXSIZE} "600M")
          endif()

          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND_ERROR_IS_FATAL ANY
            COMMAND ccache -p
          )
          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND_ERROR_IS_FATAL ANY
            COMMAND ccache -z
          )

          set(select_config_arg "")
          if ("${{ matrix.config.multiconfig }}" STREQUAL "true")
            set(select_config_arg "--config $ENV{BUILD_TYPE}")
          endif()

          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND cmake
              --build "$ENV{RUNNER_TEMP}/build"
              ${select_config_arg}
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

      - name: ccache statistics
        shell: cmake -P {0}
        run: |
          file(TO_CMAKE_PATH "$ENV{RUNNER_TEMP}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")

          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND_ERROR_IS_FATAL ANY
            COMMAND ccache -s
          )

      - name: Run tests
        shell: cmake -P {0}
        run: |
          include(ProcessorCount)
          ProcessorCount(N)

          set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

          execute_process(
            COMMAND_ECHO STDOUT
            COMMAND ctest -j "${N}"
            WORKING_DIRECTORY "$ENV{RUNNER_TEMP}/build"
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
            string(REPLACE "\n" "%0A" test_results "${test_results}")
            message("::error::${test_results}")
            message(FATAL_ERROR "Running tests failed!")
          endif()

      - name: Install with Strip
        shell: sh
        run: cmake --install "$RUNNER_TEMP/build" --prefix "$RUNNER_TEMP/instdir" --strip

      - name: Pack Build Artifact
        working-directory: ${{ runner.temp }}/instdir
        shell: sh
        run: cmake -E tar vcf "$RUNNER_TEMP/$ARTIFACT_NAME" --format=7zip -- .

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ runner.temp }}/${{ env.ARTIFACT_NAME }}
          name: ${{ env.ARTIFACT_NAME }}

  create-release:
    name: Create Release for ${{ github.ref }}
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs:
      - build
      - check-formatting
    permissions:
      contents: write

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        shell: sh
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v2
        with:
          path: ./upload_url
          name: upload_url

  publish-release-artifacts:
    if: contains(github.ref, 'tags/v')
    name: Publish Release Artifacts from ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write
    env:
      ARTIFACT_NAME: webserver-${{ matrix.config.artifact }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows 2019 - Visual Studio 2019 - MSVC 2019", artifact: "windows-msvc.7z"
          }
          # - {
          #     name: "Windows 2022 - MinGW Makefiles - MinGW 8.1", artifact: "windows-mingw.7z"
          #   }
          - {
            name: "Ubuntu 20.04 - Unix Makefiles - GCC 9.4", artifact: "linux-makefiles-gcc.7z"
          }
          - {
            name: "Ubuntu 20.04 - Ninja - GCC 9.4", artifact: "linux-ninja-gcc.7z"
          }
          - {
            name: "macOS 11 - Xcode - Clang 13.0", artifact: "macos-xcode-clang.7z"
          }
          - {
            name: "macOS 11 - Ninja - Clang 13.0", artifact: "macos-ninja-clang.7z"
          }

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v2
        with:
          name: upload_url
          path: ./

      - id: set_upload_url
        shell: sh
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ env.ARTIFACT_NAME }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/x-7z-compressed
